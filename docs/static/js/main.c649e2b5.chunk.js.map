{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","img","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,cADD,mBACrCC,EADqC,KACzBC,EADyB,KAc5C,OAEI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAKlB,SACA,uBACCO,KAAK,OACLC,MAAOT,EACPU,SAjBqB,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,a,+BCPtBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,YAClB,MAAO,CACHC,GAF+D,EAA/CA,GAGhBC,MAH+D,EAA3CA,MAIpBT,IAJ+D,EAArCU,OAAQC,iBAAkBX,QALzC,kBAYZM,GAZY,4CAAH,sDCEPM,EAAc,SAAC,GAAoB,IAAnBJ,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMT,EAAS,EAATA,IAGlC,OADAa,QAAQC,IAAId,GAER,sBAAKe,UAAU,yCAAf,UACI,qBAAKC,IAAKhB,EAAKiB,IAAKT,IACpB,4BAAIC,QCFHS,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAK,GACLc,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAoBtC,OAdAC,qBAAW,WAEPzB,EAAQC,GACHyB,MAAK,SAAAC,GAEEH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAK1B,CAACrB,IAEGsB,EDXiBK,CAAa3B,GAA9BO,EAR4B,EAQ5BA,KAR4B,EAQvBc,QAEZ,OAEA,qCACI,6BAAKrB,IAGL,qBAAKiB,UAAU,YAAf,SAESV,EAAKE,KAAI,SAACiB,GAAD,OACL,cAAC,EAAD,eAEOA,GADCA,EAAIhB,aEGlBkB,EAzBa,WAAO,IAAD,EAEM1C,mBAAS,CAAC,UAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAQ9B,OACI,qCACC,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACK4C,EAAWpB,KAAI,SAAAT,GAAQ,OACxB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCdtB8B,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.c649e2b5.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('hola mundo');\r\n\r\n    const handleInputChange = (e) => {\r\n            setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n        <input\r\n         type=\"text\"\r\n         value={inputValue}\r\n         onChange={handleInputChange}\r\n         />\r\n         </form>\r\n    \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=O9laPSw1qJ10pK5f2yHndgvDPkMnilAs`;\r\n    const resp = await fetch(url);;\r\n    const {data} = await resp.json()\r\n\r\n    const gifs = data.map(({id, title,images:{downsized_medium:{url}}}) => {\r\n        return {\r\n            id: id,\r\n            title: title,\r\n            url: url\r\n        }\r\n    })\r\n    return gifs;\r\n} \r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n\r\n    console.log(url)\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={id}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n/* import { getGifs } from '../helpers/getGifs';\r\nimport { AddCategory } from './AddCategory' */\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n/*     const [images, setImages] = useState([]);\r\n    const [count, setCount] = useState(0);\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(gifs => setImages(gifs));\r\n    }, [category]) */\r\n   const { data,loading } = useFetchGifs(category);\r\n\r\n    return (\r\n\r\n    <>\r\n        <h3>{category}</h3>\r\n        {/* <h2>{count}h2>\r\n        <button onClick={() => setCount(count +1)}>count++</button> */}\r\n        <div className=\"card-grid\">\r\n            \r\n                {data.map((img) => \r\n                    (<GifGridItem\r\n                        key={img.id}\r\n                        {...img} />))}\r\n            \r\n        </div>\r\n    </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n     \r\n        getGifs(category) \r\n            .then(img => {\r\n\r\n                    setState({\r\n                        data: img,\r\n                        loading: false\r\n                    })\r\n                  \r\n            })       \r\n\r\n    }, [category])\r\n\r\n    return state;\r\n}","import React,{useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Anime']);\r\n/*     const handleAdd = () => {\r\n        setCategories(cat => \r\n            [...cat,'Art']\r\n        )\r\n    } */\r\n    return (\r\n        <>\r\n         <h2>GifExpertApp</h2>\r\n         <AddCategory setCategories={setCategories}/>\r\n         <hr></hr>\r\n        \r\n         <ol>\r\n             {categories.map(category => \r\n             <GifGrid\r\n                 key={category}\r\n                 category={category}\r\n                  />)}\r\n         </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(<GifExpertApp />,document.getElementById('root'));\n\n\n"],"sourceRoot":""}